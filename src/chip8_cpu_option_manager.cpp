#include "chip8.h"

////////////////////////////////////////////////////////////////////////////////////////////
//		===	PUBLIC ===
////////////////////////////////////////////////////////////////////////////////////////////
chip8_cpu_option_manager::chip8_cpu_option_manager( )
    : options{ 
        "use_legacy", 
        "use_print",
        "use_stack_limit",
        "use_limit"
    }
{ 
    set( ecc_option_limit, true );
}

void chip8_cpu_option_manager::set(
    const echip8_cpu_options option,
    const bool value
) {
    options[ uint8_t( option ) ].value = value;
}

void chip8_cpu_option_manager::dump( ) const {
    for ( const auto option : options )
        printf( "%s = %d\n", option.name, option.value );
}

////////////////////////////////////////////////////////////////////////////////////////////
//		===	PUBLIC GET ===
////////////////////////////////////////////////////////////////////////////////////////////
bool chip8_cpu_option_manager::get( const echip8_cpu_options option ) const {
    return options[ uint8_t( option ) ].value;
}

////////////////////////////////////////////////////////////////////////////////////////////
//		===	OPERATOR ===
////////////////////////////////////////////////////////////////////////////////////////////
bool chip8_cpu_option_manager::operator[]( const echip8_cpu_options option ) const {
    return get( option );
}
